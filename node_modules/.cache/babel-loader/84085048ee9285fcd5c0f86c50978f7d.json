{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clement\\\\Desktop\\\\Programming\\\\Projects\\\\Web\\\\moviedb\\\\src\\\\context\\\\movie_context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport reducer from \"../reducer/movie_reducer\";\nimport { FETCH_TRENDING_MOVIE, FETCH_POPULAR_MOVIE, FETCH_TOP_RATED_MOVIE, FETCH_UPCOMING_MOVIE, FETCH_MOVIE_GENRE, FETCH_MOVIE_CERTIFICATIONS, FETCH_FILTER, FETCH_PEOPLE } from \"../constants/action\";\nimport popular_movie_data from \"../data/popular_movie_data\";\nimport genre_data from \"../data/genre_data\";\nimport certifications_data from \"../data/certifications_data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieContext = /*#__PURE__*/React.createContext();\nconst API_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"d60f4e8797f13dd4c61d8414708bb669\"; // initialState with dummy data\n// uncomment useEffect() in here, filter.js to fetch\n\nconst initialState = {\n  movieCategories: [{\n    category: \"Trending\",\n    keyword: \"/trending/movie/day\",\n    action: FETCH_TRENDING_MOVIE,\n    movies: popular_movie_data.results\n  }, {\n    category: \"Popular\",\n    keyword: \"/movie/popular\",\n    action: FETCH_POPULAR_MOVIE,\n    movies: popular_movie_data.results\n  }, {\n    category: \"Top Rated\",\n    keyword: \"/movie/top_rated\",\n    action: FETCH_TOP_RATED_MOVIE,\n    movies: popular_movie_data.results\n  }, {\n    category: \"Upcoming\",\n    keyword: \"/movie/upcoming\",\n    action: FETCH_UPCOMING_MOVIE,\n    movies: popular_movie_data.results\n  }],\n  // {id,name}\n  genres: genre_data.genres,\n  certifications: certifications_data.certifications.US,\n  displayMovies: popular_movie_data.results,\n  people: []\n};\nexport const MovieProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchAPI = async (action, url) => {\n    console.log(\"WARNING: FETCHING\");\n\n    try {\n      const response = await axios.get(url);\n      console.log(response);\n      dispatch({\n        type: action,\n        payload: response\n      });\n    } catch (error) {}\n  }; // genres + certifications\n\n\n  const fetchFilter2 = async () => {\n    // https://api.themoviedb.org/3/genre/movie/list?api_key=<<api_key>>&language=en-US\n    const urlGenres = `${API_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`; // https://api.themoviedb.org/3/certification/movie/list?api_key=<<api_key>>\n\n    const urlCertifications = `${API_URL}/certification/movie/list?api_key=${API_KEY}`;\n    fetchAPI(FETCH_MOVIE_GENRE, urlGenres);\n    fetchAPI(FETCH_MOVIE_CERTIFICATIONS, urlCertifications);\n  }; // search\n\n\n  const fetchFilter = async url => {\n    try {\n      // const response = await axios.get(url);\n      // const temp_display_movies = response.data.results;\n      const temp_display_movies = popular_movie_data.results;\n      dispatch({\n        type: FETCH_FILTER,\n        payload: temp_display_movies\n      });\n    } catch (error) {}\n  }; // people\n\n\n  const fetchPeople = async () => {\n    const url = `${API_URL}/person/popular?api_key=${API_KEY}`;\n    fetchAPI(FETCH_PEOPLE, url);\n  }; // Fetch Home Page Content\n  // i.e. The 4 categories\n\n\n  useEffect(() => {\n    const tempMovieCategories = state.movieCategories;\n    tempMovieCategories.forEach(item => {\n      const action = item.action;\n      const url = `${API_URL}${item.keyword}?api_key=${API_KEY}&language=en-US&page=1`; //fetchAPI(action, url);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: { ...state,\n      fetchFilter2,\n      fetchFilter,\n      fetchPeople\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MovieProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = MovieProvider;\nexport const useMovieContext = () => {\n  _s2();\n\n  return useContext(MovieContext);\n};\n\n_s2(useMovieContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"sources":["C:/Users/clement/Desktop/Programming/Projects/Web/moviedb/src/context/movie_context.js"],"names":["React","useContext","useReducer","useEffect","axios","reducer","FETCH_TRENDING_MOVIE","FETCH_POPULAR_MOVIE","FETCH_TOP_RATED_MOVIE","FETCH_UPCOMING_MOVIE","FETCH_MOVIE_GENRE","FETCH_MOVIE_CERTIFICATIONS","FETCH_FILTER","FETCH_PEOPLE","popular_movie_data","genre_data","certifications_data","MovieContext","createContext","API_URL","API_KEY","initialState","movieCategories","category","keyword","action","movies","results","genres","certifications","US","displayMovies","people","MovieProvider","children","state","dispatch","fetchAPI","url","console","log","response","get","type","payload","error","fetchFilter2","urlGenres","urlCertifications","fetchFilter","temp_display_movies","fetchPeople","tempMovieCategories","forEach","item","useMovieContext"],"mappings":"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","sourcesContent":["import React, { useContext, useReducer, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport reducer from \"../reducer/movie_reducer\";\r\nimport {\r\n  FETCH_TRENDING_MOVIE,\r\n  FETCH_POPULAR_MOVIE,\r\n  FETCH_TOP_RATED_MOVIE,\r\n  FETCH_UPCOMING_MOVIE,\r\n  FETCH_MOVIE_GENRE,\r\n  FETCH_MOVIE_CERTIFICATIONS,\r\n  FETCH_FILTER,\r\n  FETCH_PEOPLE,\r\n} from \"../constants/action\";\r\nimport popular_movie_data from \"../data/popular_movie_data\";\r\nimport genre_data from \"../data/genre_data\";\r\nimport certifications_data from \"../data/certifications_data\";\r\n\r\nconst MovieContext = React.createContext();\r\nconst API_URL = \"https://api.themoviedb.org/3\";\r\nconst API_KEY = \"d60f4e8797f13dd4c61d8414708bb669\";\r\n\r\n// initialState with dummy data\r\n// uncomment useEffect() in here, filter.js to fetch\r\nconst initialState = {\r\n  movieCategories: [\r\n    {\r\n      category: \"Trending\",\r\n      keyword: \"/trending/movie/day\",\r\n      action: FETCH_TRENDING_MOVIE,\r\n      movies: popular_movie_data.results,\r\n    },\r\n    {\r\n      category: \"Popular\",\r\n      keyword: \"/movie/popular\",\r\n      action: FETCH_POPULAR_MOVIE,\r\n      movies: popular_movie_data.results,\r\n    },\r\n    {\r\n      category: \"Top Rated\",\r\n      keyword: \"/movie/top_rated\",\r\n      action: FETCH_TOP_RATED_MOVIE,\r\n      movies: popular_movie_data.results,\r\n    },\r\n    {\r\n      category: \"Upcoming\",\r\n      keyword: \"/movie/upcoming\",\r\n      action: FETCH_UPCOMING_MOVIE,\r\n      movies: popular_movie_data.results,\r\n    },\r\n  ],\r\n  // {id,name}\r\n  genres: genre_data.genres,\r\n  certifications: certifications_data.certifications.US,\r\n  displayMovies: popular_movie_data.results,\r\n  people: [],\r\n};\r\n\r\nexport const MovieProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const fetchAPI = async (action, url) => {\r\n    console.log(\"WARNING: FETCHING\");\r\n    try {\r\n      const response = await axios.get(url);\r\n      console.log(response);\r\n      dispatch({ type: action, payload: response });\r\n    } catch (error) {}\r\n  };\r\n\r\n  // genres + certifications\r\n  const fetchFilter2 = async () => {\r\n    // https://api.themoviedb.org/3/genre/movie/list?api_key=<<api_key>>&language=en-US\r\n    const urlGenres = `${API_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`;\r\n    // https://api.themoviedb.org/3/certification/movie/list?api_key=<<api_key>>\r\n    const urlCertifications = `${API_URL}/certification/movie/list?api_key=${API_KEY}`;\r\n    fetchAPI(FETCH_MOVIE_GENRE, urlGenres);\r\n    fetchAPI(FETCH_MOVIE_CERTIFICATIONS, urlCertifications);\r\n  };\r\n\r\n  // search\r\n  const fetchFilter = async (url) => {\r\n    try {\r\n      // const response = await axios.get(url);\r\n      // const temp_display_movies = response.data.results;\r\n      const temp_display_movies = popular_movie_data.results;\r\n      dispatch({ type: FETCH_FILTER, payload: temp_display_movies });\r\n    } catch (error) {}\r\n  };\r\n\r\n  // people\r\n  const fetchPeople = async () => {\r\n    const url = `${API_URL}/person/popular?api_key=${API_KEY}`;\r\n    fetchAPI(FETCH_PEOPLE, url);\r\n  };\r\n\r\n  // Fetch Home Page Content\r\n  // i.e. The 4 categories\r\n  useEffect(() => {\r\n    const tempMovieCategories = state.movieCategories;\r\n    tempMovieCategories.forEach((item) => {\r\n      const action = item.action;\r\n      const url = `${API_URL}${item.keyword}?api_key=${API_KEY}&language=en-US&page=1`;\r\n      //fetchAPI(action, url);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <MovieContext.Provider\r\n      value={{ ...state, fetchFilter2, fetchFilter, fetchPeople }}\r\n    >\r\n      {children}\r\n    </MovieContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useMovieContext = () => {\r\n  return useContext(MovieContext);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}